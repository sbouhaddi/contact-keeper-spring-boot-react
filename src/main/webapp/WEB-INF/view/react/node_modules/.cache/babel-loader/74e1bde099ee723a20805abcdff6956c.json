{"ast":null,"code":"import _toConsumableArray from\"/Users/bouhaddisabri/IdeaProjects/DependecyInjection-Spring5/contacts-api/src/main/webapp/WEB-INF/view/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/bouhaddisabri/IdeaProjects/DependecyInjection-Spring5/contacts-api/src/main/webapp/WEB-INF/view/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_CONTACT,DELETE_CONTACT,UPDATE_CONTACT,SET_CURRENT,CLEAR_CURRENT,CLEAR_FILTER,FILTER_CONTACTS,LOAD_CONTACTS,CONTACT_ERROR,CLEAR_CONTACTS}from'../types';export default(function(state,action){switch(action.type){case LOAD_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:action.payload,loading:false});case ADD_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:[].concat(_toConsumableArray(state.contacts),[action.payload]),loading:false});case DELETE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.filter(function(contact){return contact.id!==action.payload;}),loading:false});case UPDATE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.map(function(contact){return contact.id===action.payload.id?action.payload:contact;}),loading:false});case FILTER_CONTACTS:return _objectSpread(_objectSpread({},state),{},{filtered:state.contacts.filter(function(contact){var regex=new RegExp(\"\".concat(action.payload),'gi');return contact.name.match(regex)||contact.email.match(regex);}),loading:false});case CLEAR_FILTER:return _objectSpread(_objectSpread({},state),{},{filtered:null});case SET_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:action.payload});case CLEAR_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:null});case CONTACT_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload});case CLEAR_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:null,filtered:null,error:null,loading:false});default:return state;}});","map":{"version":3,"sources":["/Users/bouhaddisabri/IdeaProjects/DependecyInjection-Spring5/contacts-api/src/main/webapp/WEB-INF/view/react/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","UPDATE_CONTACT","SET_CURRENT","CLEAR_CURRENT","CLEAR_FILTER","FILTER_CONTACTS","LOAD_CONTACTS","CONTACT_ERROR","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filter","contact","id","map","filtered","regex","RegExp","name","match","email","current","error"],"mappings":"6cAAA,OACEA,WADF,CAEEC,cAFF,CAGEC,cAHF,CAIEC,WAJF,CAKEC,aALF,CAMEC,YANF,CAOEC,eAPF,CAQEC,aARF,CASEC,aATF,CAUEC,cAVF,KAWO,UAXP,CAaA,eAAe,SAACC,KAAD,CAAQC,MAAR,CAAmB,CAChC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKL,CAAAA,aAAL,CACE,sCACKG,KADL,MAEEG,QAAQ,CAAEF,MAAM,CAACG,OAFnB,CAGEC,OAAO,CAAE,KAHX,GAKF,IAAKf,CAAAA,WAAL,CACE,sCACKU,KADL,MAEEG,QAAQ,8BAAMH,KAAK,CAACG,QAAZ,GAAsBF,MAAM,CAACG,OAA7B,EAFV,CAGEC,OAAO,CAAE,KAHX,GAKF,IAAKd,CAAAA,cAAL,CACE,sCACKS,KADL,MAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CACR,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,EAAR,GAAeP,MAAM,CAACG,OAAnC,EADQ,CAFZ,CAKEC,OAAO,CAAE,KALX,GAOF,IAAKb,CAAAA,cAAL,CACE,sCACKQ,KADL,MAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAmB,SAACF,OAAD,QAC3BA,CAAAA,OAAO,CAACC,EAAR,GAAeP,MAAM,CAACG,OAAP,CAAeI,EAA9B,CAAmCP,MAAM,CAACG,OAA1C,CAAoDG,OADzB,EAAnB,CAFZ,CAKEF,OAAO,CAAE,KALX,GAOF,IAAKT,CAAAA,eAAL,CACE,sCACKI,KADL,MAEEU,QAAQ,CAAEV,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsB,SAACC,OAAD,CAAa,CAC3C,GAAMI,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcX,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CACA,MAAOG,CAAAA,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BJ,OAAO,CAACQ,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC,CACD,CAHS,CAFZ,CAMEN,OAAO,CAAE,KANX,GAQF,IAAKV,CAAAA,YAAL,CACE,sCACKK,KADL,MAEEU,QAAQ,CAAE,IAFZ,GAIF,IAAKjB,CAAAA,WAAL,CACE,sCACKO,KADL,MAEEgB,OAAO,CAAEf,MAAM,CAACG,OAFlB,GAIF,IAAKV,CAAAA,aAAL,CACE,sCACKM,KADL,MAEEgB,OAAO,CAAE,IAFX,GAIF,IAAKlB,CAAAA,aAAL,CACE,sCAAYE,KAAZ,MAAmBiB,KAAK,CAAEhB,MAAM,CAACG,OAAjC,GACF,IAAKL,CAAAA,cAAL,CACE,sCACKC,KADL,MAEEG,QAAQ,CAAE,IAFZ,CAGEO,QAAQ,CAAE,IAHZ,CAIEO,KAAK,CAAE,IAJT,CAKEZ,OAAO,CAAE,KALX,GAOF,QACE,MAAOL,CAAAA,KAAP,CAhEJ,CAkED,CAnED","sourcesContent":["import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  UPDATE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  CLEAR_FILTER,\n  FILTER_CONTACTS,\n  LOAD_CONTACTS,\n  CONTACT_ERROR,\n  CLEAR_CONTACTS,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case LOAD_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n        loading: false,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n        loading: false,\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n        loading: false,\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case CONTACT_ERROR:\n      return { ...state, error: action.payload };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}